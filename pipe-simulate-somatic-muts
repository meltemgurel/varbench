'''
varbench pipeline - Simulating somatic mutations

-----------------------------------------------------------------------

Requirements:
  See environment.yml

Usage:
  snakemake \
  	--snakefile pipe-simulate-somatic-muts \
  	--configfile config.p1.yml
'''

import json
import sys
import subprocess
from os.path import join, basename, dirname
from setuptools import setup, find_packages
from snakemake.utils import R

include: "scripts/functions.py"

#------------------------------------------------------------------------------
#--------------------------------------------------------------------- Globals-
#------------------------------------------------------------------------------

# Path to the reference genome.
REFERENCE = config['REFERENCE'] if config['REFERENCE'] else sys.exit('ERROR: You must provide a reference file')

# Path to the sample reads.
SAMPLE1 = config['SAMPLE1'] if config['SAMPLE1'] else sys.exit('ERROR: You must provide a sample file')
SAMPLE2 = config['SAMPLE2'] if config['SAMPLE2'] else sys.exit('ERROR: You must provide a sample file')
SAMPLE = SAMPLE1

# Minimum coverage depth
MINDEPTH = config['MINDEPTH'] if config['MINDEPTH'] else 10

# Maximum coverage depth
MAXDEPTH = config['MAXDEPTH'] if config['MAXDEPTH'] else 10000

# Directory where intermediate files will be written.
OUT_DIR = config['OUT_DIR'] if config['OUT_DIR'] else 'p1/'

# For now threads, will scale to cores
NTHREADS = config['NTHREADS'] if config['NTHREADS'] else 64

#------------------------------------------------------------------------------
# Step 0. Set-up: set up environment
#
# TODO: update the final rule
#------------------------------------------------------------------------------

# Check for dependencies
setup()

rule all:
    input:
        join(OUT_DIR, "report.txt")

#------------------------------------------------------------------------------
# Step 1. Alignment: Align the SAMPLE to the REFERENCE and sort
#------------------------------------------------------------------------------

# Align the sample to the reference genome
rule bwa_map:
    """Run bwa mem"""
    input:
        reference=REFERENCE,
        read1=SAMPLE1,
        read2=SAMPLE2
    output:
        temp(join(OUT_DIR, "{prefix}.aligned.sam"))
    params:
        rg='@RG\\tID:'+get_name(SAMPLE)+'\\tSM:'+get_name(SAMPLE),
        tc=NTHREADS
    log:
        join(OUT_DIR, "logs/bwa_map."+get_name(SAMPLE)+".log")
    message:
        "Running alignment with {params.tc} threads on {input.read1} and {input.read2}."
    benchmark:
        join(OUT_DIR, "benchmarks/p1-bwa_map.txt")
    run:
        #create reference index if it doesn't exist
        if not os.path.isfile(input.reference+'.bwt'):
            shell("bwa index "+input.reference)
        #run bwa mem to align the reads
        shell("(bwa mem -R '{params.rg}' -t {params.tc} {input.reference} {input.read1} {input.read2} | "
              "samtools view -Sh -F 3844 - > {output}) 2> {log}")

# Split the aligned reads 50-50 as the normal and tumour-template
# TODO fix intermediate files
rule partition_reads:
    input:
        join(OUT_DIR, "{prefix}.aligned.sam")
    output:
        normal=temp(join(OUT_DIR, "{prefix}.normal.temp.sam")),
        tumour=temp(join(OUT_DIR, "{prefix}.tumour.temp.sam"))
    log:
        join(OUT_DIR, "logs/split_aligned."+get_name(SAMPLE)+".log")
    benchmark:
        join(OUT_DIR, "benchmarks/p1-split_aligned.txt")
    shell:
        "(echo ***ALIGNED SAMPLE STATS***; samtools flagstat {input}) > "+join(OUT_DIR, "readStats.txt")+"; "
        "samtools view {input} | awk -F'\\t' '!seen[$1]++ {{print $1}}' | shuf > alln; "
        "hf=$(($(wc -l < alln)/2)); head -n $hf alln > norn; tail -n $hf alln > tumn; "
        "cat <(samtools view -H {input}) <(grep -Fwf norn {input}) > {output.normal}; "
        "cat <(samtools view -H {input}) <(grep -Fwf tumn {input}) > {output.tumour}; "
        "rm alln norn tumn"

# Sort the normal
rule samtools_normal_sort:
    input:
        join(OUT_DIR, "{prefix}.normal.temp.sam")
    output:
        join(OUT_DIR, "{prefix}.normal.bam")
    log:
        join(OUT_DIR, "logs/samtools_normal_sort."+get_name(SAMPLE)+".log")
    benchmark:
        join(OUT_DIR, "benchmarks/p1-samtools_normal_sort.txt")
    shell:
        "(samtools sort -T "+OUT_DIR+"{wildcards.prefix} "
        "-O bam {input} > {output}) 2> {log}"

# Index the normal
rule samtools_normal_index:
    input:
        join(OUT_DIR, "{prefix}.normal.bam")
    output:
        join(OUT_DIR, "{prefix}.normal.bam.bai")
    log:
        join(OUT_DIR, "logs/samtools_normal_index."+get_name(SAMPLE)+".log")
    benchmark:
        join(OUT_DIR, "benchmarks/p1-samtools_normal_index.txt")
    shell:
        "(samtools index {input}) 2> {log}; (echo ***NORMAL SAMPLE STATS***; "
        "samtools flagstat {input}) >> "+join(OUT_DIR, "readStats.txt")

# Sort the tumour
rule samtools_tumour_sort:
    input:
        join(OUT_DIR, "{prefix}.tumour.temp.sam")
    output:
        temp(join(OUT_DIR, "{prefix}.tumour-template.bam"))
    log:
        join(OUT_DIR, "logs/samtools_tumour_sort."+get_name(SAMPLE)+".log")
    benchmark:
        join(OUT_DIR, "benchmarks/p1-samtools_tumour_sort.txt")
    shell:
        "(samtools sort -T "+OUT_DIR+"{wildcards.prefix} "
        "-O bam {input} > {output}) 2> {log}"

# Index the tumour
rule samtools_tumour_index:
    input:
        join(OUT_DIR, "{prefix}.tumour-template.bam")
    output:
        temp(join(OUT_DIR, "{prefix}.tumour-template.bam.bai"))
    log:
        join(OUT_DIR, "logs/samtools_tumour_index."+get_name(SAMPLE)+".log")
    benchmark:
        join(OUT_DIR, "benchmarks/p1-samtools_tumour_index.txt")
    shell:
        "(samtools index {input}) 2> {log}; "
        "(echo ***TUMOUR SAMPLE BEFORE MODIFICATION STATS***; "
        "samtools flagstat {input}) >> "+join(OUT_DIR, "readStats.txt")

#------------------------------------------------------------------------------
# Step 2. Coverage: Identify coverage using bedtools
#------------------------------------------------------------------------------

# Identify coverage
## Generates per-base-coverage table (chr pos base coverage)
rule samtools_mpileup:
    input:
        reference=REFERENCE,
        tumour=join(OUT_DIR, "{prefix}.tumour-template.bam"),
        tumouri=join(OUT_DIR, "{prefix}.tumour-template.bam.bai")
    output:
        temp(join(OUT_DIR, "{prefix}.regions"))
    params:
        maxdepth=MAXDEPTH,
        mindepth=MINDEPTH
    log:
        join(OUT_DIR, "logs/samtools_mpileup."+get_name(SAMPLE)+".log")
    benchmark:
        join(OUT_DIR, "benchmarks/p1-samtools_mpileup.txt")
    shell:
        "(samtools mpileup -f {input.reference} {input.tumour} -d {params.maxdepth} | "
        "awk '$4 > {params.mindepth} {{printf \"%s\\t%s\\t%s\\t%s\\n\",$1,$2,$3,$4}}' "
        "> {output}) 2> {log}"

#------------------------------------------------------------------------------
# Step 3. Mutations: Generating the desired somatic mutations
#------------------------------------------------------------------------------

# Select bases to create the varfile
rule r_create_varfile:
    input:
        join(OUT_DIR, "{prefix}.regions")
    output:
        varfile=temp(join(OUT_DIR, "{prefix}.varfile")),
        alleles=temp(join(OUT_DIR, "{prefix}.alleles")),
        mutfreq=join(OUT_DIR, "{prefix}.mutations.freq.pdf")
    benchmark:
        join(OUT_DIR, "benchmarks/p1-r_create_varfile.txt")
    shell:
        "Rscript --vanilla scripts/r_create_varfile.R {input} {output.varfile} "
        "{output.alleles} {output.mutfreq}"

#------------------------------------------------------------------------------
# Step 4. Mutations: Introducing somatic mutations in the original BAM file
#
# TODO: {CW} depth at site is greater than cutoff, aborting mutation.
#------------------------------------------------------------------------------

# Generate mutated bam files
rule bamsurgeon_addsnv:
    input:
        varfile=join(OUT_DIR, "{prefix}.varfile"),
        targetbam=join(OUT_DIR, "{prefix}.tumour-template.bam"),
        targetbami=join(OUT_DIR, "{prefix}.tumour-template.bam.bai"),
        reference=REFERENCE
    output:
        temp(join(OUT_DIR, "{prefix}.mut.bam"))
    params:
        "-p 128 --mindepth "+str(MINDEPTH)+" --maxdepth "+str(MAXDEPTH)+" --ignoresnps --force --tagreads "
        "--tmpdir "+join(OUT_DIR, "addsnv")
    log:
        join(OUT_DIR, "logs/bamsurgeon_addsnv."+get_name(SAMPLE)+".log")
    benchmark:
        join(OUT_DIR, "benchmarks/p1-bamsurgeon_addsnv.txt")
    shell:
        "(addsnv.py {params} -v {input.varfile} -f {input.targetbam} -r {input.reference} "
        "-o {output}) 2> {log}"

# Sort the mutated reads
rule samtools_mut_sort:
    input:
        join(OUT_DIR, "{prefix}.mut.bam")
    output:
        join(OUT_DIR, "{prefix}.tumour.bam")
    log:
        join(OUT_DIR, "logs/samtools_mut_sort."+get_name(SAMPLE)+".log")
    benchmark:
        join(OUT_DIR, "benchmarks/p1-samtools_mut_sort.txt")
    shell:
        "(samtools sort -T "+OUT_DIR+"{wildcards.prefix} "
        "-O bam {input} > {output}) 2> {log}"

# Index the mutated reads
rule samtools_mut_index:
    input:
        join(OUT_DIR, "{prefix}.tumour.bam")
    output:
        join(OUT_DIR, "{prefix}.tumour.bam.bai")
    log:
        join(OUT_DIR, "logs/samtools_mut_index."+get_name(SAMPLE)+".log")
    benchmark:
        join(OUT_DIR, "benchmarks/p1-samtools_mut_index.txt")
    shell:
        "(samtools index {input}) 2> {log}; "
        "(echo ***TUMOUR SAMPLE AFTER MODIFICATION STATS***; samtools flagstat {input}) >> "+join(OUT_DIR, "readStats.txt")

#------------------------------------------------------------------------------
# Step 5. Checksum: Calculating the allele frequency of the induced mutations
#------------------------------------------------------------------------------

# Calculate the actual allele frequencies for each position in *.alleles
rule py_allele_freq_cal:
    input:
        alleles=join(OUT_DIR, "{prefix}.alleles"),
        normal=join(OUT_DIR, "{prefix}.normal.bam"),
        normali=join(OUT_DIR, "{prefix}.normal.bam.bai"),
        tumour=join(OUT_DIR, "{prefix}.tumour.bam"),
        tumouri=join(OUT_DIR, "{prefix}.tumour.bam.bai"),
    output:
        originals=join(OUT_DIR, "{prefix}.originals.txt"),
        mutations=join(OUT_DIR, "{prefix}.mutations.txt")
    params:
        maxdepth=MAXDEPTH
    benchmark:
        join(OUT_DIR, "benchmarks/p1-py_allele_freq_cal.txt")
    shell:
        "python scripts/py_allele_freq_cal.py {input.alleles} {input.normal} {output.originals} {params.maxdepth}; "
        "python scripts/py_allele_freq_cal.py {input.alleles} {input.tumour} {output.mutations} {params.maxdepth}"

# Create the somatic mutations list
rule cat_somatic_mutations:
    input:
        originals=expand(join(OUT_DIR, "{prefix}.originals.txt"), prefix=get_name(SAMPLE)),
        mutations=expand(join(OUT_DIR, "{prefix}.mutations.txt"), prefix=get_name(SAMPLE)),
        plots=expand(join(OUT_DIR, "{prefix}.mutations.freq.pdf"), prefix=get_name(SAMPLE))
    output:
        join(OUT_DIR, "report.txt")
    shell:
        "(echo ***Allele frequencies in the normal sample***; cat {input.originals}; "
        "echo ***Allele frequencies in the tumour sample***; cat {input.mutations}) >> {output}"
