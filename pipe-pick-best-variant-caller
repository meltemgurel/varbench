'''
varbench pipeline - Pick best variant caller with bootstrap

TODO: DESC
-----------------------------------------------------------------------

Requirements:
  See environment.yml

Usage:
  snakemake \
  	--snakefile pipe-pick-best-variant-caller \
  	--configfile config.p2.yml
'''

import sys
import pandas as pd
from os.path import join, basename, dirname
from snakemake.utils import R

include: "scripts/functions.py"

#------------------------------------------------------------------------------
#--------------------------------------------------------------------- Globals-
#------------------------------------------------------------------------------

# Path to the reference genome.
REFERENCE = config['REFERENCE'] if config['REFERENCE'] else sys.exit('ERROR: You must provide a reference file')

# Path to normal and tumor files.
NORMAL = config['NORMAL'] if config['NORMAL'] else sys.exit('ERROR: You must provide a normal BAM file')
TUMOUR = config['TUMOUR'] if config['TUMOUR'] else sys.exit('ERROR: You must provide a tumour BAM file')

# Path to the mutations file.
MUTATIONLIST = config['MUTATIONS'] if config['MUTATIONS'] else sys.exit('ERROR: You must provide a list of mutations')

# Directory where intermediate files will be written.
OUT_DIR = config['OUT_DIR'] if config['OUT_DIR'] else 'p2/'

# Bootstrap k count
K = 100

# Variance caller
CALLERS = ['vardict','somaticsniper']

# For now threads, will scale to cores
NTHREADS = config['NTHREADS'] if config['NTHREADS'] else 64

#------------------------------------------------------------------------------
# Step 0. Set-up: set up environment
#
# TODO: check for dependencies
#------------------------------------------------------------------------------

rule all:
    input:
        text=join(OUT_DIR, "results-all-callers.txt"),
        plot=join(OUT_DIR, "r2dens-all-callers.pdf")

#------------------------------------------------------------------------------
# Step 1. Resampling: Resample NORMAL and TUMOUR reads
#------------------------------------------------------------------------------

# Resample normals
rule resample_normals:
    """Resample normals"""
    input:
        normal=NORMAL
    output:
        temp(join(OUT_DIR, "normal"))
    message:
        "Resampling {input.normal}"
    benchmark:
        "benchmarks/p2-resample_normals.txt"
    shell:
        "readCount=$(samtools view -c {input.normal}); "
        "for i in {{1.."+str(K)+"}}; "
        "do cat <(samtools view -H {input.normal}) <(samtools view {input.normal} | shuf -r -n $readCount) > {output}.temp.$i.bam; done; "
        "touch {output}"

# Resample tumours
rule resample_tumours:
    """Resample tumours"""
    input:
        tumour=TUMOUR
    output:
        temp(join(OUT_DIR, "tumour"))
    message:
        "Resampling {input.tumour}"
    benchmark:
        "benchmarks/p2-resample_tumours.txt"
    shell:
        "readCount=$(samtools view -c {input.tumour}); "
        "for i in {{1.."+str(K)+"}}; "
        "do cat <(samtools view -H {input.tumour}) <(samtools view {input.tumour} | shuf -r -n $readCount) > {output}.temp.$i.bam; done; "
        "touch {output}"

# Sort and index normals
rule sidx_normals:
    """Sort and index normals"""
    input:
        normal=join(OUT_DIR, "normal")
    output:
        temp(join(OUT_DIR, "snormal"))
    benchmark:
        "benchmarks/p2-sidx_normals.txt"
    shell:
        "for i in {{1.."+str(K)+"}}; "
        "do samtools sort -O bam {input.normal}.temp.$i.bam > {input.normal}.$i.bam; samtools index {input.normal}.$i.bam; done; "
        "touch {output}"

# Sort and index tumours
rule sidx_tumours:
    """Sort and index tumours"""
    input:
        tumour=join(OUT_DIR, "tumour")
    output:
        temp(join(OUT_DIR, "stumour"))
    benchmark:
        "benchmarks/p2-sidx_tumours.txt"
    shell:
        "for i in {{1.."+str(K)+"}}; "
        "do samtools sort -O bam {input.tumour}.temp.$i.bam > {input.tumour}.$i.bam; samtools index {input.tumour}.$i.bam; done; "
        "touch {output}"

#------------------------------------------------------------------------------
# Step 2. Variant calling: Calling somatic mutations
#------------------------------------------------------------------------------

# Call mutations
rule call_mutations:
    """Call mutations"""
    input:
        reference=REFERENCE,
        mutationl=MUTATIONLIST,
        normal=join(OUT_DIR, "snormal"),
        tumour=join(OUT_DIR, "stumour")
    output:
        temp(join(OUT_DIR, "mutations"))
    benchmark:
        "benchmarks/p2-call_mutations.txt"
    run:
        shell("rm "+OUT_DIR+"/*temp*.bam")
        for caller in CALLERS:
            cmd = get_caller_cmd(caller, input.reference, input.mutationl, OUT_DIR)

            for i in range(1, K+1):
                nbam = join(OUT_DIR, "normal."+str(i)+".bam")
                tbam = join(OUT_DIR, "tumour."+str(i)+".bam")
                outf = join(OUT_DIR, "mutations."+caller+"."+str(i)+".vcf")

                if(caller == 'vardict'):
                    namenormal = "normal_"+str(i)
                    nametumour = "tumour_"+str(i)
                    cmdf = cmd.format(nametumour, tbam, nbam, nametumour, namenormal, outf)

                elif(caller == 'mutect'):
                    cmdf = cmd.format(nbam, tbam, outf)

                elif(caller == 'somaticsniper'):
                    cmdf = cmd.format(tbam, nbam, outf)

                print(cmdf)
                shell(cmdf)

        shell("touch {output}")

#------------------------------------------------------------------------------
# Step 3. Quality metrics: Calculating quality metrics
#------------------------------------------------------------------------------

# Calculate quality metrics
rule r_calculate_quality_metrics:
    input:
        mutations=join(OUT_DIR, "mutations"),
        mutationl=MUTATIONLIST
    output:
        quality_metrics=join(OUT_DIR, "results-all-callers.txt"),
        r2dens_plots=join(OUT_DIR, "r2dens-all-callers.pdf"),
        afboxplots=join(OUT_DIR, "afbox-all-callers.pdf"),
    benchmark:
        "benchmarks/p2-r_calcualte_quality_metrics.txt"
    run:
        pdfs_r2 = []
        pdfs_bp = []
        for caller in CALLERS:
            out_r2dens = join(OUT_DIR, "r2dens-"+caller+".pdf")
            out_afbps = join(OUT_DIR, "afbox-"+caller+".pdf")
            out_af-corr = join(OUT_DIR, "af-corr-"+caller+".pdf")
            pdfs_r2.append(out_r2dens)
            pdfs_bp.append(out_afbps)
            shell("Rscript --vanilla scripts/r_calculate_quality_metrics.R {input.mutations} "
                    +caller+" {input.mutationl} "+OUT_DIR+" {output.quality_metrics} "
                    +out_r2dens+ " "+ out_af-corr+ " "+ out_afbps)

        shell("gs -dBATCH -dNOPAUSE -q -sDEVICE=pdfwrite -sOutputFile={output.r2dens_plots} "+' '.join(pdfs_r2))
        shell("gs -dBATCH -dNOPAUSE -q -sDEVICE=pdfwrite -sOutputFile={output.afboxplots} "+' '.join(pdfs_bp))
